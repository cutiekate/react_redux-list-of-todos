{"version":3,"sources":["store/index.ts","helpers/api.ts","components/Button.tsx","components/TodoList.tsx","components/SortButtons.tsx","App.tsx","index.tsx"],"names":["setSortType","sortType","type","getLoading","state","loading","getTodos","todos","sortOrder","sort","a","b","title","localeCompare","user","name","id","sortTodos","sortBy","sortIn","initialState","store","createStore","action","orders","indexOf","length","filter","todo","todoId","composeWithDevTools","getAll","url","fetch","then","response","json","Button","text","onClick","disabled","className","TodoList","dispatch","useDispatch","useSelector","map","key","defaultChecked","completed","SortButtons","getAppData","todosFromServer","users","find","userId","App","initTodos","finally","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3bebe1a3.chunk.js","sourcesContent":["import { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n// Action types - is just a constant. MUST have a unique value.\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\nconst INIT_TODOS = 'INIT_TODOS';\nconst SET_SORT_TYPE = 'SET_SORT_TYPE';\nconst DELETE_TODO = 'DELETE_TODO';\n\n// Action creators - a function returning an action object\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = () => ({ type: FINISH_LOADING });\nexport const initTodos = (todos: Todo[]) => ({\n  type: INIT_TODOS,\n  todos,\n});\nexport const setSortType = (sortType: string) => ({ type: SET_SORT_TYPE, sortType });\n\nexport const deleteTodo = (todoId: number) => ({\n  type: DELETE_TODO,\n  todoId,\n});\n\nconst sortTodos = (todos: Todo[], sortType: string, sortOrder: string) => {\n  if (sortOrder === '') {\n    return todos;\n  }\n\n  switch (sortType) {\n    case 'title':\n      return [...todos].sort((a, b) => (sortOrder === 'asc' ? a.title.localeCompare(b.title) : b.title.localeCompare(a.title)));\n    case 'userName':\n      return [...todos].sort((a, b) => (sortOrder === 'asc'\n        ? a.user?.name.localeCompare(b.user?.name ?? '') ?? 0\n        : b.user?.name.localeCompare(a.user?.name ?? '')) ?? 0);\n\n    case 'id':\n      return [...todos].sort((a, b) => (sortOrder === 'asc' ? a.id - b.id : b.id - a.id));\n\n    default:\n      return todos;\n  }\n};\n\n// Selectors\nexport const getLoading = (state: RootState) => state.loading;\nexport const getTodos = (state: RootState) => sortTodos(state.todos, state.sortBy, state.sortIn);\nexport const getSortType = (state: RootState) => state.sortBy;\n\n// Initial state\nexport type RootState = {\n  loading: boolean;\n  todos: Todo[];\n  sortBy: string;\n  sortIn: string;\n};\n\nconst initialState: RootState = {\n  loading: false,\n  todos: [],\n  sortBy: '',\n  sortIn: '',\n};\n\nconst rootReducer = (state = initialState, action: AnyAction): RootState => {\n  const orders = ['desc', 'asc', ''];\n\n  switch (action.type) {\n    case SET_SORT_TYPE:\n      return {\n        ...state,\n        sortBy: action.sortType,\n        sortIn: action.sortType === state.sortBy ? orders[((orders.indexOf(state.sortIn) + 1) % orders.length)] : 'desc',\n      };\n    case DELETE_TODO:\n      return {\n        ...state,\n        todos: state.todos.filter(todo => action.todoId !== todo.id),\n      };\n    case INIT_TODOS:\n      return { ...state, todos: action.todos };\n    case START_LOADING:\n      return { ...state, loading: true };\n    case FINISH_LOADING:\n      return { ...state, loading: false };\n    default:\n      return state;\n  }\n};\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(rootReducer, composeWithDevTools());\n\nexport default store;\n","const API_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nconst getAll = <T>(url: string): Promise<T[]> => {\n  return fetch(`${API_URL}${url}.json`)\n    .then(response => response.json());\n};\n\nexport const getUsers = () => getAll<User>('/users');\nexport const getTodos = () => getAll<Todo>('/todos');\n","import React from 'react';\n\ntype Props = {\n  text: string;\n  onClick: () => void;\n  disabled?: boolean;\n};\n\nconst Button: React.FC<Props> = ({\n  text,\n  onClick,\n  disabled = false,\n}) => {\n  return (\n    <button\n      className=\"btn btn-secondary active\"\n      type=\"button\"\n      onClick={onClick}\n      disabled={disabled}\n    >\n      {text}\n    </button>\n  );\n};\n\nexport default Button;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { deleteTodo, getTodos } from '../store';\nimport Button from './Button';\n\nconst TodoList = () => {\n  const dispatch = useDispatch();\n  const todos = useSelector(getTodos);\n\n  return (\n    <ul className=\"list-group\">\n      {todos.map(todo => (\n        <li\n          className=\"list-group-item d-flex justify-content-between align-items-center\"\n          key={todo.id}\n        >\n          <span className=\"badge badge-primary badge-pill\">{todo.id}</span>\n          {todo.title}\n          <span className=\"users\">{todo.user?.name}</span>\n          <input\n            type=\"checkbox\"\n            defaultChecked={todo.completed}\n          />\n          <Button\n            text=\"delete\"\n            onClick={() => {\n              dispatch(deleteTodo(todo.id));\n            }}\n          />\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default TodoList;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setSortType } from '../store';\n\nconst SortButtons = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <p className=\"button_container\">\n      <button\n        className=\"button btn btn-outline-info\"\n        onClick={() => dispatch(setSortType('title'))}\n        type=\"button\"\n      >\n        Sort by title\n      </button>\n      <button\n        className=\"button btn btn-outline-info\"\n        onClick={() => dispatch(setSortType('id'))}\n        type=\"button\"\n      >\n        Sort by id\n      </button>\n      <button\n        className=\"button btn btn-outline-info\"\n        onClick={() => dispatch(setSortType('userName'))}\n        type=\"button\"\n      >\n        Sort by user name\n      </button>\n    </p>\n  );\n};\n\nexport default SortButtons;\n","\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport './App.scss';\nimport * as api from './helpers/api';\nimport Button from './components/Button';\nimport TodoList from './components/TodoList';\nimport SortButtons from './components/SortButtons';\n\nimport {\n  initTodos,\n  startLoading,\n  finishLoading,\n  getLoading,\n  getTodos,\n} from './store';\n\nconst getAppData = async (): Promise<Todo[]> => {\n  const todosFromServer = await api.getTodos();\n  const users = await api.getUsers();\n\n  return todosFromServer.map(todo => ({\n    ...todo,\n    user: users.find(user => user.id === todo.userId) || null,\n  }));\n};\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const todos = useSelector(getTodos);\n  const loading = useSelector(getLoading);\n\n  const initData = () => {\n    dispatch(startLoading());\n\n    getAppData()\n      .then(todosFromServer => {\n        dispatch(initTodos(todosFromServer));\n      })\n      .finally(() => {\n        dispatch(finishLoading());\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"header\">\n        Redux list of todos\n      </h1>\n      {todos.length === 0\n      && (\n        <Button\n          text={loading ? 'Loading...' : 'Init data'}\n          disabled={loading}\n          onClick={initData}\n        />\n      )}\n\n      {todos.length > 0 && (\n        <>\n          <SortButtons />\n          <TodoList />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}